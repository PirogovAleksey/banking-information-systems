// Universal JavaScript –¥–ª—è –≤—Å—ñ—Ö –ª–µ–∫—Ü—ñ–π —Ç–∞ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü—ñ–π
// –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω—ñ –±–∞–Ω–∫—ñ–≤—Å—å–∫—ñ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó - –ö—ñ–±–µ—Ä–±–µ–∑–ø–µ–∫–∞
// –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è: lectures, slides, presentations

class BankingLecturePresentation {
    constructor() {
        this.currentSlide = 0;
        this.slides = [];
        this.totalSlides = 0;
        this.isPlaying = false;
        this.autoPlayInterval = null;
        this.touchStartX = 0;
        this.touchEndX = 0;
        this.keyboardEnabled = true;

        this.init();
    }

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü—ñ—ó
    init() {
        this.initSlides();
        this.initNavigation();
        this.initKeyboardControls();
        this.initTouchControls();
        this.initSlideIndicators();
        this.initAutoPlay();
        this.initProgressTracking();

        // –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à–∏–π —Å–ª–∞–π–¥
        this.showSlide(0);

        console.log(`üè¶ –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü—ñ—è –≥–æ—Ç–æ–≤–∞! –°–ª–∞–π–¥—ñ–≤: ${this.totalSlides}`);
    }

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–ª–∞–π–¥—ñ–≤
    initSlides() {
        this.slides = document.querySelectorAll('.slide');
        this.totalSlides = this.slides.length;

        if (this.totalSlides === 0) {
            console.error('‚ùå –°–ª–∞–π–¥–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ!');
            return;
        }

        // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ initial —Å—Ç–∞–Ω–∏
        this.slides.forEach((slide, index) => {
            slide.classList.remove('active', 'prev');
            slide.style.transform = index === 0 ? 'translateX(0)' : 'translateX(100%)';
            slide.style.opacity = index === 0 ? '1' : '0';

            // –î–æ–¥–∞—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—ó –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç—É
            this.setupSlideAnimations(slide);
        });

        console.log(`üìä –ó–Ω–∞–π–¥–µ–Ω–æ ${this.totalSlides} —Å–ª–∞–π–¥—ñ–≤`);
    }

    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–Ω—ñ–º–∞—Ü—ñ–π –¥–ª—è —Å–ª–∞–π–¥—É
    setupSlideAnimations(slide) {
        const elements = slide.querySelectorAll('h1, h2, h3, p, .content-card, .concept-card, ul, ol, .security-warning, .security-success');

        elements.forEach((el, index) => {
            el.style.opacity = '0';
            el.style.transform = 'translateY(30px)';
            el.style.transition = `all 0.6s ease ${index * 0.1}s`;
        });
    }

    // –ü–æ–∫–∞–∑ —Å–ª–∞–π–¥—É –∑ –∞–Ω—ñ–º–∞—Ü—ñ—î—é
    showSlide(index) {
        if (index < 0 || index >= this.totalSlides) return;

        const prevIndex = this.currentSlide;
        this.currentSlide = index;

        // –û–Ω–æ–≤–ª—é—î–º–æ —Å–ª–∞–π–¥–∏
        this.slides.forEach((slide, i) => {
            slide.classList.remove('active', 'prev');

            if (i === index) {
                slide.classList.add('active');
                slide.style.opacity = '1';
                slide.style.transform = 'translateX(0)';
                slide.style.zIndex = '10';

                // –ê–Ω—ñ–º—É—î–º–æ –∫–æ–Ω—Ç–µ–Ω—Ç —Å–ª–∞–π–¥—É
                setTimeout(() => this.animateSlideContent(slide), 200);

            } else if (i === prevIndex) {
                slide.classList.add('prev');
                slide.style.transform = i < index ? 'translateX(-100%)' : 'translateX(100%)';
                slide.style.opacity = '0';
                slide.style.zIndex = '1';

            } else {
                slide.style.opacity = '0';
                slide.style.transform = i < index ? 'translateX(-100%)' : 'translateX(100%)';
                slide.style.zIndex = '1';
            }
        });

        // –û–Ω–æ–≤–ª—é—î–º–æ UI
        this.updateSlideCounter();
        this.updateSlideIndicators();
        this.updateNavigationButtons();
        this.trackProgress();

        console.log(`üìç –°–ª–∞–π–¥ ${index + 1}/${this.totalSlides}`);
    }

    // –ê–Ω—ñ–º–∞—Ü—ñ—è –∫–æ–Ω—Ç–µ–Ω—Ç—É —Å–ª–∞–π–¥—É
    animateSlideContent(slide) {
        const elements = slide.querySelectorAll('h1, h2, h3, p, .content-card, .concept-card, ul, ol, .security-warning, .security-success');

        elements.forEach((el) => {
            el.style.opacity = '1';
            el.style.transform = 'translateY(0)';
        });
    }

    // –ù–∞–≤—ñ–≥–∞—Ü—ñ—è - –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Å–ª–∞–π–¥
    nextSlide() {
        if (this.currentSlide < this.totalSlides - 1) {
            this.showSlide(this.currentSlide + 1);
        } else {
            // –¶–∏–∫–ª—ñ—á–Ω–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—è (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
            this.showSlide(0);
        }
    }

    // –ù–∞–≤—ñ–≥–∞—Ü—ñ—è - –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Å–ª–∞–π–¥
    previousSlide() {
        if (this.currentSlide > 0) {
            this.showSlide(this.currentSlide - 1);
        } else {
            // –¶–∏–∫–ª—ñ—á–Ω–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—è (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
            this.showSlide(this.totalSlides - 1);
        }
    }

    // –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ª–∞–π–¥—É
    goToSlide(index) {
        this.showSlide(index);
    }

    // –ü–µ—Ä—à–∏–π —Å–ª–∞–π–¥
    firstSlide() {
        this.showSlide(0);
    }

    // –û—Å—Ç–∞–Ω–Ω—ñ–π —Å–ª–∞–π–¥
    lastSlide() {
        this.showSlide(this.totalSlides - 1);
    }

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
    initNavigation() {
        // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó —è–∫—â–æ —ó—Ö –Ω–µ–º–∞—î
        if (!document.querySelector('.navigation')) {
            this.createNavigationButtons();
        }

        // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
        document.addEventListener('click', (e) => {
            if (e.target.matches('[data-action="next"]')) {
                this.nextSlide();
            } else if (e.target.matches('[data-action="prev"]')) {
                this.previousSlide();
            } else if (e.target.matches('[data-action="first"]')) {
                this.firstSlide();
            } else if (e.target.matches('[data-action="last"]')) {
                this.lastSlide();
            } else if (e.target.matches('[data-action="menu"]')) {
                this.goToMenu();
            } else if (e.target.matches('[data-action="fullscreen"]')) {
                this.toggleFullscreen();
            } else if (e.target.matches('[data-action="autoplay"]')) {
                this.toggleAutoPlay();
            }
        });
    }

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
    createNavigationButtons() {
        const nav = document.createElement('div');
        nav.className = 'navigation';
        nav.innerHTML = `
            <button class="nav-btn menu-btn" data-action="menu" title="–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –º–µ–Ω—é">
                <span>üè†</span> –ú–µ–Ω—é
            </button>
            <button class="nav-btn" data-action="first" title="–ü–µ—Ä—à–∏–π —Å–ª–∞–π–¥">
                <span>‚è™</span>
            </button>
            <button class="nav-btn" data-action="prev" title="–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Å–ª–∞–π–¥">
                <span>‚èÆÔ∏è</span>
            </button>
            <button class="nav-btn" data-action="next" title="–ù–∞—Å—Ç—É–ø–Ω–∏–π —Å–ª–∞–π–¥">
                <span>‚è≠Ô∏è</span>
            </button>
            <button class="nav-btn" data-action="last" title="–û—Å—Ç–∞–Ω–Ω—ñ–π —Å–ª–∞–π–¥">
                <span>‚è©</span>
            </button>
            <button class="nav-btn" data-action="fullscreen" title="–ü–æ–≤–Ω–æ–µ–∫—Ä–∞–Ω–Ω–∏–π —Ä–µ–∂–∏–º">
                <span>üîç</span>
            </button>
            <button class="nav-btn" data-action="autoplay" title="–ê–≤—Ç–æ–ø—Ä–æ–≥—Ä–∞–≤–∞–Ω–Ω—è">
                <span>‚ñ∂Ô∏è</span>
            </button>
        `;
        document.body.appendChild(nav);
    }

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
    updateNavigationButtons() {
        const prevBtn = document.querySelector('[data-action="prev"]');
        const nextBtn = document.querySelector('[data-action="next"]');
        const firstBtn = document.querySelector('[data-action="first"]');
        const lastBtn = document.querySelector('[data-action="last"]');

        if (prevBtn) prevBtn.disabled = this.currentSlide === 0;
        if (nextBtn) nextBtn.disabled = this.currentSlide === this.totalSlides - 1;
        if (firstBtn) firstBtn.disabled = this.currentSlide === 0;
        if (lastBtn) lastBtn.disabled = this.currentSlide === this.totalSlides - 1;
    }

    // –ö–µ—Ä—É–≤–∞–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é
    initKeyboardControls() {
        document.addEventListener('keydown', (e) => {
            if (!this.keyboardEnabled) return;

            switch(e.key) {
                case 'ArrowRight':
                case ' ':
                case 'PageDown':
                    e.preventDefault();
                    this.nextSlide();
                    break;
                case 'ArrowLeft':
                case 'PageUp':
                    e.preventDefault();
                    this.previousSlide();
                    break;
                case 'Home':
                    e.preventDefault();
                    this.firstSlide();
                    break;
                case 'End':
                    e.preventDefault();
                    this.lastSlide();
                    break;
                case 'F11':
                    e.preventDefault();
                    this.toggleFullscreen();
                    break;
                case 'Escape':
                    if (document.fullscreenElement) {
                        document.exitFullscreen();
                    }
                    break;
                case 'p':
                case 'P':
                    if (e.ctrlKey) {
                        e.preventDefault();
                        this.printSlides();
                    }
                    break;
            }
        });

        console.log('‚å®Ô∏è –ö–µ—Ä—É–≤–∞–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ');
    }

    // –ö–µ—Ä—É–≤–∞–Ω–Ω—è –¥–æ—Ç–∏–∫–∞–º–∏ (–º–æ–±—ñ–ª—å–Ω—ñ –ø—Ä–∏—Å—Ç—Ä–æ—ó)
    initTouchControls() {
        const container = document.querySelector('.slide-container') || document.body;

        container.addEventListener('touchstart', (e) => {
            this.touchStartX = e.changedTouches[0].screenX;
        });

        container.addEventListener('touchend', (e) => {
            this.touchEndX = e.changedTouches[0].screenX;
            this.handleSwipe();
        });
    }

    // –û–±—Ä–æ–±–∫–∞ —Å–≤–∞–π–ø—ñ–≤
    handleSwipe() {
        const swipeThreshold = 50;
        const diff = this.touchStartX - this.touchEndX;

        if (Math.abs(diff) > swipeThreshold) {
            if (diff > 0) {
                // –°–≤–∞–π–ø –ª—ñ–≤–æ—Ä—É—á - –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Å–ª–∞–π–¥
                this.nextSlide();
            } else {
                // –°–≤–∞–π–ø –ø—Ä–∞–≤–æ—Ä—É—á - –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Å–ª–∞–π–¥
                this.previousSlide();
            }
        }
    }

    // –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏ —Å–ª–∞–π–¥—ñ–≤
    initSlideIndicators() {
        if (document.querySelector('.slide-indicators')) return;

        const indicators = document.createElement('div');
        indicators.className = 'slide-indicators';

        for (let i = 0; i < this.totalSlides; i++) {
            const indicator = document.createElement('div');
            indicator.className = 'slide-indicator';
            indicator.dataset.slide = i;
            indicator.addEventListener('click', () => this.goToSlide(i));
            indicators.appendChild(indicator);
        }

        document.body.appendChild(indicators);
        this.updateSlideIndicators();
    }

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤
    updateSlideIndicators() {
        const indicators = document.querySelectorAll('.slide-indicator');
        indicators.forEach((indicator, index) => {
            indicator.classList.toggle('active', index === this.currentSlide);
        });
    }

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ —Å–ª–∞–π–¥—ñ–≤
    updateSlideCounter() {
        const counters = document.querySelectorAll('.slide-counter');
        counters.forEach(counter => {
            counter.textContent = `${this.currentSlide + 1}/${this.totalSlides}`;
        });
    }

    // –ê–≤—Ç–æ–ø—Ä–æ–≥—Ä–∞–≤–∞–Ω–Ω—è
    initAutoPlay() {
        this.autoPlayDuration = 5000; // 5 —Å–µ–∫—É–Ω–¥
    }

    toggleAutoPlay() {
        const autoplayBtn = document.querySelector('[data-action="autoplay"]');

        if (this.isPlaying) {
            clearInterval(this.autoPlayInterval);
            this.isPlaying = false;
            if (autoplayBtn) {
                autoplayBtn.innerHTML = '<span>‚ñ∂Ô∏è</span>';
                autoplayBtn.title = '–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –∞–≤—Ç–æ–ø—Ä–æ–≥—Ä–∞–≤–∞–Ω–Ω—è';
            }
            console.log('‚è∏Ô∏è –ê–≤—Ç–æ–ø—Ä–æ–≥—Ä–∞–≤–∞–Ω–Ω—è –∑—É–ø–∏–Ω–µ–Ω–æ');
        } else {
            this.autoPlayInterval = setInterval(() => {
                this.nextSlide();
            }, this.autoPlayDuration);
            this.isPlaying = true;
            if (autoplayBtn) {
                autoplayBtn.innerHTML = '<span>‚è∏Ô∏è</span>';
                autoplayBtn.title = '–ó—É–ø–∏–Ω–∏—Ç–∏ –∞–≤—Ç–æ–ø—Ä–æ–≥—Ä–∞–≤–∞–Ω–Ω—è';
            }
            console.log('‚ñ∂Ô∏è –ê–≤—Ç–æ–ø—Ä–æ–≥—Ä–∞–≤–∞–Ω–Ω—è –∑–∞–ø—É—â–µ–Ω–æ');
        }
    }

    // –ü–æ–≤–Ω–æ–µ–∫—Ä–∞–Ω–Ω–∏–π —Ä–µ–∂–∏–º
    toggleFullscreen() {
        if (!document.fullscreenElement) {
            document.documentElement.requestFullscreen().catch(err => {
                console.error('–ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É –≤ –ø–æ–≤–Ω–æ–µ–∫—Ä–∞–Ω–Ω–∏–π —Ä–µ–∂–∏–º:', err);
            });
        } else {
            document.exitFullscreen();
        }
    }

    // –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º–µ–Ω—é
    goToMenu() {
        // –ù–∞–º–∞–≥–∞—î–º–æ—Å—å –∑–Ω–∞–π—Ç–∏ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é
        const pathLevels = window.location.pathname.split('/').length - 1;
        let backPath = '../'.repeat(Math.max(pathLevels - 1, 1));

        // –Ø–∫—â–æ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—ñ lectures/moduleX/lectureY
        if (window.location.pathname.includes('/lectures/')) {
            backPath = '../../../index.html';
        }

        window.location.href = backPath;
    }

    // –î—Ä—É–∫ —Å–ª–∞–π–¥—ñ–≤
    printSlides() {
        // –ü–æ–∫–∞–∑—É—î–º–æ –≤—Å—ñ —Å–ª–∞–π–¥–∏ –¥–ª—è –¥—Ä—É–∫—É
        this.slides.forEach(slide => {
            slide.style.position = 'relative';
            slide.style.opacity = '1';
            slide.style.transform = 'none';
            slide.style.pageBreakAfter = 'always';
        });

        setTimeout(() => {
            window.print();

            // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –ø—ñ—Å–ª—è –¥—Ä—É–∫—É
            setTimeout(() => {
                this.initSlides();
                this.showSlide(this.currentSlide);
            }, 1000);
        }, 500);
    }

    // –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É
    initProgressTracking() {
        this.startTime = Date.now();
        this.slideProgress = new Array(this.totalSlides).fill(false);
    }

    trackProgress() {
        this.slideProgress[this.currentSlide] = true;

        const completedSlides = this.slideProgress.filter(Boolean).length;
        const progressPercent = Math.round((completedSlides / this.totalSlides) * 100);

        console.log(`üìà –ü—Ä–æ–≥—Ä–µ—Å: ${completedSlides}/${this.totalSlides} —Å–ª–∞–π–¥—ñ–≤ (${progressPercent}%)`);

        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ localStorage
        const lectureId = this.getLectureId();
        localStorage.setItem(`lecture_progress_${lectureId}`, JSON.stringify({
            currentSlide: this.currentSlide,
            completed: this.slideProgress,
            lastVisited: Date.now(),
            progressPercent: progressPercent
        }));
    }

    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è ID –ª–µ–∫—Ü—ñ—ó –∑ URL
    getLectureId() {
        const path = window.location.pathname;
        const match = path.match(/lecture(\d+)_(\d+)/) || path.match(/module(\d+)/) || ['unknown'];
        return match[0] || 'unknown';
    }

    // –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É
    restoreProgress() {
        const lectureId = this.getLectureId();
        const saved = localStorage.getItem(`lecture_progress_${lectureId}`);

        if (saved) {
            try {
                const progress = JSON.parse(saved);
                this.slideProgress = progress.completed || [];

                // –ü–∏—Ç–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —á–∏ —Ö–æ—á–µ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –∑ –º—ñ—Å—Ü—è –∑—É–ø–∏–Ω–∫–∏
                if (progress.currentSlide > 0) {
                    const continueFromLast = confirm(
                        `–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –∑ —Å–ª–∞–π–¥—É ${progress.currentSlide + 1}?`
                    );

                    if (continueFromLast) {
                        this.showSlide(progress.currentSlide);
                    }
                }

                console.log(`üìñ –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–æ–≥—Ä–µ—Å: ${progress.progressPercent}%`);
            } catch (e) {
                console.error('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É:', e);
            }
        }
    }

    // –ï–∫—Å–ø–æ—Ä—Ç –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü—ñ—ó
    exportSlides() {
        const exportData = {
            title: document.title,
            slides: Array.from(this.slides).map((slide, index) => ({
                index: index,
                content: slide.innerHTML,
                classes: Array.from(slide.classList)
            })),
            timestamp: new Date().toISOString(),
            lectureId: this.getLectureId()
        };

        const blob = new Blob([JSON.stringify(exportData, null, 2)], {
            type: 'application/json'
        });

        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `lecture_${this.getLectureId()}_export.json`;
        a.click();
        URL.revokeObjectURL(url);

        console.log('üì§ –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü—ñ—è –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–∞');
    }

    // –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Å–µ—Å—ñ—ó
    endSession() {
        const sessionData = {
            lectureId: this.getLectureId(),
            totalTime: Date.now() - this.startTime,
            slidesViewed: this.slideProgress.filter(Boolean).length,
            totalSlides: this.totalSlides,
            completionRate: Math.round((this.slideProgress.filter(Boolean).length / this.totalSlides) * 100),
            endTime: new Date().toISOString()
        };

        // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (—è–∫—â–æ —î API)
        console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—ñ—ó:', sessionData);

        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ª–æ–∫–∞–ª—å–Ω–æ
        const sessions = JSON.parse(localStorage.getItem('lecture_sessions') || '[]');
        sessions.push(sessionData);
        localStorage.setItem('lecture_sessions', JSON.stringify(sessions.slice(-10))); // –û—Å—Ç–∞–Ω–Ω—ñ 10 —Å–µ—Å—ñ–π
    }
}

// Utilities –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü—ñ—î—é
class PresentationUtils {
    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—É—Ä—Å—É
    static getCourseStats() {
        const sessions = JSON.parse(localStorage.getItem('lecture_sessions') || '[]');

        return {
            totalSessions: sessions.length,
            totalTime: sessions.reduce((sum, s) => sum + s.totalTime, 0),
            averageCompletion: sessions.length > 0
                ? Math.round(sessions.reduce((sum, s) => sum + s.completionRate, 0) / sessions.length)
                : 0,
            lastSession: sessions.length > 0 ? sessions[sessions.length - 1] : null
        };
    }

    // –û—á–∏—â–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ–≥—Ä–µ—Å—É
    static clearProgress() {
        const keys = Object.keys(localStorage).filter(key =>
            key.startsWith('lecture_progress_') || key === 'lecture_sessions'
        );

        keys.forEach(key => localStorage.removeItem(key));
        console.log('üóëÔ∏è –ü—Ä–æ–≥—Ä–µ—Å –æ—á–∏—â–µ–Ω–æ');
    }

    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–µ–º–∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü—ñ—ó
    static setTheme(theme) {
        const body = document.body;
        body.className = body.className.replace(/theme-\w+/g, '');
        body.classList.add(`theme-${theme}`);

        localStorage.setItem('presentation_theme', theme);
        console.log(`üé® –¢–µ–º–∞ –∑–º—ñ–Ω–µ–Ω–∞ –Ω–∞: ${theme}`);
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ —Ç–∞ —Ñ—É–Ω–∫—Ü—ñ—ó
let BankingPresentation;

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
document.addEventListener('DOMContentLoaded', function() {
    console.log('üè¶ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ª–µ–∫—Ü—ñ—ó "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω—ñ –±–∞–Ω–∫—ñ–≤—Å—å–∫—ñ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó"');

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î —Å–ª–∞–π–¥–∏ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
    if (document.querySelector('.slide')) {
        BankingPresentation = new BankingLecturePresentation();

        // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å –ø—ñ—Å–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
        setTimeout(() => {
            BankingPresentation.restoreProgress();
        }, 500);
    } else {
        console.log('‚ÑπÔ∏è –°–ª–∞–π–¥–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ, –º–æ–∂–ª–∏–≤–æ —Ü–µ –Ω–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü—ñ—è');
    }
});

// –û–±—Ä–æ–±–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è –≤—ñ–∫–Ω–∞
window.addEventListener('beforeunload', function() {
    if (BankingPresentation) {
        BankingPresentation.endSession();
    }
});

// –ï–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø—É
window.BankingPresentation = BankingPresentation;
window.PresentationUtils = PresentationUtils;

// –ö–æ–Ω—Å–æ–ª—å–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è —Ä–æ–∑—Ä–æ–±–∫–∏
if (typeof window !== 'undefined') {
    window.devCommands = {
        nextSlide: () => BankingPresentation?.nextSlide(),
        prevSlide: () => BankingPresentation?.previousSlide(),
        goToSlide: (index) => BankingPresentation?.goToSlide(index),
        getStats: () => PresentationUtils.getCourseStats(),
        clearProgress: () => PresentationUtils.clearProgress(),
        exportSlides: () => BankingPresentation?.exportSlides()
    };

    console.log('üõ†Ô∏è Dev –∫–æ–º–∞–Ω–¥–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ —á–µ—Ä–µ–∑ window.devCommands');
}

console.log('‚úÖ Universal JavaScript –¥–ª—è –ª–µ–∫—Ü—ñ–π –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
